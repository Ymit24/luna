const printf = fn@extern["printf"]@variadic(fmt: *i8);
const puts = fn@extern["puts"](fmt: *i8);

const factorial = fn(n: i32): i32 {
    if n < 2 {
        return 1;
    };
    return n * factorial(n - 1);
};

const fib = fn(n: i32): i32 {
    if n < 2 {
        return 1;
    };

    return fib(n-1) + fib(n-2);
};

const while = fn(start: i32, end: i32, body: fn(): void) {
    if start < end {
        printf("%d\n", start);
        puts("prebodycall");
        body();
        puts("called body done.");
        while(1 + start, end, body);
        return;
    };
    puts("done.");
    return;
};

const main = fn(): i32 {
    const a: i32 = 3;
    if a < 5 {
        puts("it worked!");
        let foo = 100;
        let inner = fn() {
            puts("test");
            return;
        };
        printf("foo is %d\n", foo);
        inner();
        a = 0;
        if a {
            puts("other");
        } else if 0 {
            puts("hmm");
        } else {
            puts("not other");
        };
    } else {
        puts("lame");
    };

    printf("factorial of 3 is %d\n", factorial(8));
    printf("fib(6) is %d\n", fib(8));

    puts("calling while");
    const body = fn() {
        puts("test");
        return;
    };
    while(0, 3, body);

    return 0;
};
