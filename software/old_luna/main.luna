from std import printf;

fn main(): i32 {
    let f = factorial(4);
    let p = Point.new();

    printf("Factorial(4)=%d\n", f);

    let couldBeNull = getOrNull(false);

    return 1;
}

struct Point {
    final int x;
    final iny y;

    fn default(): Point {
        return Point { x:0, y:0 };
    }
}

struct BaseList {
    &BaseList? next;
    fn ():String printFn;

    fn isTail(): bool {
        return next == null;
    }
}

struct IntList {
    BaseList base;
    int data;
}

fn printLinkedList(base: &BaseList) {
    let output= base.printFn();
    print(output);
}

fn main() {
    let intList = IntList {base: BaseList{next: null, printFn: printIntList},data: 123};

    printLinkedList(intList.base);
}



enum NodeErrors {
    AlreadyHasNext,
}

struct Logger {
    level: LogLevel;

    fn new() { ... }

    fn i(fmt: std::string, vals: [&unknown]?): void {
        let msg = eval_format(fmt, vals);
        std::printf("[INFO]: %s", msg);
    }
}

static logger: Logger = Logger.new();

fn asdf(node: &Node) {
    let data = 100;
    node.update(&data);
}

struct Node {
    mut &Node? next;
    mut &unknown data;

    fn new(data: &unknown): Node {
        return Node {
            next: null,
            data: data,
        };
    }

    fn update(newData: &unknown) {
        data = newData;
    }

    fn insertAfter(next: &Node): !NodeErrors {
        if self.next != null {
            throw .AlreadyHasNext;
        }

        if (self.next == Point { x: 1, y: 0 }) {
        }

        self.next = next;

        logger.i('added node (with next?: %b) as next.', [next.next != null]);
    }
}

fn doStuffWithNodes(): void {
    let root = Node.new(0);

    printf('root has %d value', [root.data]);
}


fn factorial(n: int): int!String {
    if n < 0 {
        throw 'cant be less than zero!';
    }
    if n == 0 {
        return 1;
    }
    return n * factorial(n-1);
}

fn getOrNull(isNull: bool): int? {
    if isNull { return null; } else { return 1; }
}
