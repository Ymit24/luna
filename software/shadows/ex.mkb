let T_COLON = 1;

let tokenize = fn(source) {
  let toks = [];

  let make_token = fn(type, pos, span) { return { type: type, loc: pos, span: 1 }; }
  let tokenize_next = fn(source) {
    if (len(source) == 0) { push(toks, make_token(T_EOF, 0, 0)); return ""; }

    let top = first(source);

    if (top == ":") { return make_token(T_COLON, index); push(toks, tok); }
    else if (top == ",") { let tok = make_token(T_COMMA, index, 1); push(toks, tok); }
    else if (top == ";") { let tok = make_token(T_COMMA, index, 1); push(toks, tok); }
    else if (top == "(") { let tok = make_token(T_COMMA, index, 1); push(toks, tok); }
    else if (top == ")") { let tok = make_token(T_COMMA, index, 1); push(toks, tok); }
    else if (top == "{") { let tok = make_token(T_COMMA, index, 1); push(toks, tok); }
    else if (top == "}") { let tok = make_token(T_COMMA, index, 1); push(toks, tok); }
    else if (top == "[") { let tok = make_token(T_COMMA, index, 1); push(toks, tok); }
    else if (top == "]") { let tok = make_token(T_RSB, index, 1); push(toks, tok); }
    else { push(toks, make_token(T_ILLEGAL, index, 1)); };

    return tokenize_next(substring(source, 0, 1), toks);
  };

  return tokenize_next(source, toks);
};

let shell = module {
  let consts = module {
    let TEXT_RAM_LINE_INDEX = 1000;
    let TEXT_RAM_START = 1001;
    let LINE_LENGTH = 80;
    let MAX_LINES = 25;
  };

  let internal = module {
    let scroll = fn() {
      *(consts::TEXT_RAM_LINE_INDEX) = (*(consts::TEXT_RAM_LINE_INDEX) + 1) % consts::MAX_LINES;
    };
  };

  let write = fn(shell, char) {
    *(consts::TEXT_RAM_START + line_index++) = char;

    if shell.line_index > consts::LINE_LENGTH {
      shell.line_index = 0;
      shell.line_num++;
      if shell.line_num > consts::MAX_LINES {
        internal::scroll();
      }
    }
  };

  let write_chars = fn(shell, chars) { iters::each(strings::toarray(chars), fn(char) { write(shell, char); }); };

  let Shell = type {
    line_index: i32;
    line_num: i32;
  };

  let make_shell = fn(): Shell {
    return (Shell) {
      line_index: 0,
      line_num: 0,
    };
  };
};

let my_shell: Shell = shell::make_shell();
shell::write_chars(my_shell, "hello world!");

let List = fn(undertype) {
  return type {
    items: [undertype],
  };
}

let compile_error = fn(msg) {
  printf("[COMPILE ERROR] %s\n", msg);
  abort();
}

let while = fn(condition, body) {
  if condition() {
    body();
    while(condition, body);
  }
}

let parser = fn(toks) {
  let parse_ident = fn() {};

  let expect = fn(tok) {
    if !match(tok) {
      compile_error(format_string("Expected '%d' token, found '%d'", tok, first(toks)));
    }
    return pop(toks);
  };

  let make_let = fn(ident, expr) {
    return {
      type: "LET",
      ident: ident,
      expr: expr
    };
  };

  let parse_expr = fn(prec) {
    let precs = {
      LOW: 0,
      T_PLUS: 1,
      T_MINU: 1,
      T_MULT: 2,
      T_DIVI: 2,
      MAX: 999,
    };

    let infix_func = fn(token_type) {
      return fn (left) {
        return make_infix(token_type, left, parse_expr(precs[token_type]));
      };
    }

    let prefix_funcs = {
      T_NUM: fn (tok) { return tok["value"]; },
    };

    let infix_funcs = {
      T_PLUS: infix_func(T_PLUS),
      T_MINU: infix_func(T_MINU),
      T_MULT: infix_func(T_MULT),
      T_DIVI: infix_func(T_DIVI),
    };

    let tok = pop(toks);

    let left = prefix_funcs[tok["type"]](tok);

    while(fn() {
      return prec <= precs[first(toks)["type"]];
    }, fn() {
      tok = pop(toks);
      left = infix_funcs[tok["type"]](left);
    });

    return left;
  };

  while(fn() { return len(toks) > 0; }, fn() {
    if match(T_LET) {
      pop(toks);

      let ident = expect(T_IDENT);
      expect(T_EQUALS);
      let expr = parse_expr(0);
      expect(T_SEMICOLON);

      return make_let(ident, expr);
    }
  });
};

let main = fn (argc, argv) {
  if (argc != 2) {
    print("Wrong number of arguments.");
  }

  let filepath = argv[0];
  let contents = read_file(filepath);
  let toks = tokenize(contents);

  printf("toks: %d\n", toks);
};

let tests = [
  fn() {
    let raw = "let x = 1;";
    let expected = [
      T_LET,
      T_IDENT,
      T_EQUALS,
      T_LITERAL,
      T_SEMICOLON,
    ];

    let results = tokenize(raw);
    assert_equal(expected, map(results, fn(x) { return x["type"]; }));
  }
];



# os

let iters_mod = fn() {
  let for = fn(start, end, inc, body) {
    if start < end {
      body(start);
      for(start+inc, end, inc, body);
    }
  };

  let each = fn(array, body) {
    if $len(array) == 0 { return; }
    body($first(array));
    each($tail(array), body);
  };

  return {
    "for": for,
    "each": each,
  };
};

let iters = iters_mod();

let leds_mod = fn(BASE_ADDR) {
  let set = fn (id) {
    $write(BASE_ADDR + id, 1);
  };

  let unset = fn (id) {
    $write(BASE_ADDR + id, 0);
  };

  let clear_all = fn () {
    iters["for"](0, 1, 1, fn(i){
      unset(i);
    });
  };

  return {
    "set": set,
    "unset": unset,
    "clear_all": clear_all,
  };
};

let text_composite_layer_mod = fn(
  TEXT_MEM_BASE_ADDR,
  LINE_COL_ADDR,
  LINE_ROW_ADDR,
  ROWS,
  COLS
) {
  let current_row = fn() { $read(LINE_ROW_ADDR); }
  let current_col = fn() { $read(LINE_COL_ADDR); }
  let current_index = fn() { return TEXT_MEM_BASE_ADDR + current_col() + COLS * current_row(); };

  let advance_scroll = fn() {
    # todo
  };

  let advance_row = fn() {
    if current_row() < ROWS - 1 {
      $write(LINE_ROW_ADDR, current_row() + 1);
    } else {
      $write(LINE_ROW_ADDR, 0);
      advance_scroll();
    }
  };

  let advance_column = fn() {
    if current_col() < COLS - 1 {
      $write(LINE_COL_ADDR, current_col() + 1);
    } else {
      $write(LINE_COL_ADDR, 0);
      advance_row();
    }
  };

  let putc = fn(char) {
    $write(current_index(), char);
    advance_column();
  };
  return {
    "putc": putc,
  };
};

let hw_mod = fn(LEDS_BASE_ADDR,TEXT_MEM_BASE_ADDR,LINE_COL_ADDR,LINE_ROW_ADDR) {
  return {
    "leds": leds_mod(LEDS_BASE_ADDR),
    "text_composite_layer": text_composite_layer_mod(
      TEXT_MEM_BASE_ADDR,
      LINE_COL_ADDR,
      LINE_ROW_ADDR,
      80,
      20,
    ),
  };
};

let mmio_map = {
  "LED_BASE_ADDR": 100,
  "TEXT_MEM_BASE_ADDR": 1202,
  "LINE_COL_ADDR": 1201,
  "LINE_ROW_ADDR": 1202,
};

let hw = hw_mod(
  mmio_map["LEDS_BASE_ADDR"],
  mmio_map["TEXT_MEM_BASE_ADDR"],
  mmio_map["LINE_COL_ADDR"],
  mmio_map["LINE_ROW_ADDR"],
);

let boot = fn() {
  hw["leds"]["clear_all"]();
  let putc = hw["text_composite_layer"]["putc"];
  iters["each"]("Hello world!", fn(c) { putc(c); })
};

let _start = fn() { boot(); };
