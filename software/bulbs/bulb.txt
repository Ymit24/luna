# Virtual Machine

`
void start() {
    printf("hello world");
    sqr(10);
}

int sqr(int n) {
    return n * n;
}
`

`
goto $main
# Here is where static program memory is stored. The goto $main means it never runs
static s0 'helloworld\0' # the static keyword means inline this into the machine code and label it s0
$main:
    # push the string
    push @s0 # get addr of static s0
    # Call printf
    call $std::printf

    push constant 10 -> @10 D=A @0 A=M M=D A=A+1 D = A @0 M=D
    call $sqr
$sqr:
    # take n and duplicate it
    pop temp
    push temp
    push temp

    # square it
    call $std::math::mult
    # noop which keeps result as return value
    pop temp
    push temp
`

## Push onto stack (SP @ M[0])
`
push constant X
# store constant x in D
@X
D=A
# Goto tail of stack
@0
A=M
# Write X
M=D
# Increment SP
A=A+1
D=A
# Update SP
@0
M=D
`


## Strings
`
goto $start
$_start(asm):
    # Set stack pointer to 0x100
    @0x100
    D=A
    @0
    M=D
    goto $main # kick off actual program
$main:
    push 'h' # say program stack starts at 0x100
    push 'e'
    ...
    push '\0'
    push 0x100 # addr of start of null terminated string
    call $std::printf
`

## Expressions
`
int fancy(int a, int b) {
    return a + ( b * a ) / b;
}
`
`
goto $start
$_start:
    asm {
        # Set stack pointer to 0x100
        @0x100
        D=A
        @0
        M=D
    }
    goto $main # kick off actual program
$fancy:
    push a
    push b
    call $std::math::mult
    push b
    call $std::math::div
    push a
    add
    ret
$main:
    push constant 2
    push constant 8
    call $fancy

    ->

    push %sp # this is our current stack pointer
    goto $fancy
`

# Memory Map
0x0000: SP
0x0001: BSP, Base Stack Pointer, for our stack frame
0x0002: X Virtual General Register
0x0003: Y Virtual General Register
0x0004: Z Virtual General Register
0x0100-0x1FFF: Start of working program memory (SP=0x100 int _start)
0x2000-0x3FFF: Start of general purpose heap memory

# syntax


## Predefined symbols

| symbol | desc |
-----------------
SP | Stack Pointer
pc | program counter (current instruction address)
BSP | BSP pointer
X | X reg
Y | Y reg
Z | Z reg



%symbol name <- replaced at translation time based on symbol resolution.
$symbol <- replaced at translation time with label

## Call a function
1. push current BSP
`push %bsp`
1.1 push return address
push %pc
2. push function arguments in reverse order
`push ...`
3. 'call' the function
`goto $label_name
3.b put return label
4. receive return value (if applicable)
`pop %x` # could be any register
5. cleanup from return by recovering the bsp
`pop %bsp`

## In a function
1. write function label
`$label_name:`
2. setup bsp=sp
push %sp
pop %bsp
3. do function stuff
3.a. access arguments. Arg 0 = %bsp-1, ..., Arg n = %bsp-n
4. push return value
`push ...`
5. goto return address
5.1 pop arguments into void (unused)
pop _
...
pop _
5.2 pop ret addr into pc
pop %pc # this line actually does the jump
